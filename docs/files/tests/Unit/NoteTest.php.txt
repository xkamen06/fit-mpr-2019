<?php

namespace Tests\Unit;

use Tests\TestCase;
use App\Note;
use App\Project;
use App\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

/**
 * Class NoteTest
 * @package Tests\Unit
 * @author Patrik Krhovsky <patrikkrhovsky@gmail.com>
 */
//class testing Note module for CRUD and POST requests
class NoteTest extends TestCase
{
    /**
     * Create note test
     */
    public function testCreateNote()
    {
        $data = [
        	'id' => 99,
            'content' => 'nieco',
            'id_project' => 1,
            'id_user' => 2,
        ];

        $note = (new Note)->create($data);

        $this->assertInstanceOf(Note::class, $note);
        $this->assertEquals($data['content'], $note->content);
        $this->assertEquals($data['id_project'], $note->id_project);
        $this->assertEquals($data['id_user'], $note->id_user);

    }

    /**
     * Get note test
     */
    public function testGetNote()
    {
        $data = [
            'content' => 'nieco',
            'id_project' => 1,
            'id_user' => 2,
        ];

        $found = (new Note)->findOrFail(99);

        $this->assertInstanceOf(Note::class, $found);
        $this->assertEquals($found->content, $data['content']);
        $this->assertEquals($found->id_project, $data['id_project']);
        $this->assertEquals($found->id_user, $data['id_user']);
    }

    /**
     * Update note notest
     */
    public function testUpdateNote()
    {
        $data = [
            'content' => 'nieco',
            'id_project' => 1,
            'id_user' => 6,
        ];

        Note::where('id', 99)
          ->update(['id_user' => 6]);

        $found = (new Note)->findOrFail(99);

        $this->assertInstanceOf(Note::class, $found);
        $this->assertEquals($found->content, $data['content']);
        $this->assertEquals($found->id_project, $data['id_project']);
        $this->assertEquals($found->id_user, $data['id_user']);
    }

    /**
     * Delete note test
     */
    public function testDeleteNote()
    {
        Note::destroy(99);
        $found = (new Note)->find(99);
        $this->assertEquals($found, null);
    }

    /**
     * Create note by form test
     */
    public function testCreatePOSTNote()
    {
        $data = [
            'id' => 98,
            'name' => 'meno',
            'id_user' => 2,
            'estimated_price' => 50,
            'estimated_time' => 5,
            'date_from' => '2019-04-16',
            'date_to' => '2019-04-18',
            'status' => 'stav',
        ];

        (new Project)->create($data);

        \Auth::login(User::find(1));

        $response = $this->withHeaders([
            'X-Header' => 'Value',
        ])->json('POST', '/projekty/komentar/pridat/98', ['content' => 'tututu']);

        $response->assertStatus(302);

        \DB::table("note")
        ->where("id_project", "=", "98")
        ->orderBy("id", "DESC")
        ->take(1)
        ->delete();

        Project::destroy(98);
    }
}

